class Tools {
    
    // returns an approximation of the square root of f thanks to the Heron method in O(1)
    float _sqrt(float f) {
        float u0 = f/2.0f;
        float u1;
        int n = 0;

        while (n < 100) {
            u1 = (u0 + f/u0)/2.0f;
            u0 = u1;
            n++;
        }

    }

    // returns f to the power of n in O(log(n))
    float _pow(float f, int n) {
        if (n == 0) {
            return 1.0f;
        }

        if (n == 1) {
            return f;
        }
        
        if (n>1){
            if n%2 == 0 {
                return _pow(f*f, n/2);
            }
            return f*_pow(f*f, (n-1)/2);
        }
        if n%2 == 0 {
            return _pow(1/(f*f), n/2);
        }
        return (1/f)*_pow(1/(f*f), (n-1)/2);
    }

    // returns the absolute value of f in O(1)
    float _abs(float f) {
        if (f < 0.0) {
            return -f;
        }
        return f;
    }

    // returns the efponent of f
    int _pow32(float f){
        if (f == 0.0f) {
            return 0;
        }

        int res = 0;
        if (f < 0.0f) {
            f = -f;
        }
        if (f < 1.0f) {
            while (f < 1.0f) {
                f *= 2.0f;
                res--;
            }
            return res;
        }

        while (f >= 1.0f) {
            f /= 2.0f;
            res++;
        }
        return res;
    }
}