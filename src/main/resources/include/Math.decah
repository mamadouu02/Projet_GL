// Grenoble INP - Ensimag projet GL -*- mode: java -*-
// Library for class Math of Deca, coded in Deca


class Math {
    float pi =3.1415927410125732421875;

        // return the ulp of f
    float ulp(float f) {
        if (f == 0.0f) {
            return this._pow(2, -149);
        }
        return this._pow(2, this._pow32(f)) * this._pow(2, -23);
    }
    
    // Calcul de pi Ã  partir du cosinus
    float sin(float f) {
        float f = this.recenter(f);
        float ulp = this.ulp(f);
        float res = 0;
        float x = 1;
        int i = 0;
        while (this._abs(x) > ulp) {
            x = this._pow(-1, i) * (this._pow(f, 2 * i + 1) / this._fact(2 * i + 1));
            res = res + x;
            i = i + 1;
        }
        return res;
    }

    float cos(float f) {
        float f = this.recenter(f);
        float ulp = this.ulp(f);
        float res = 0;
        float x = 1;
        int i = 0;
        while (this._abs(x) > ulp) {
            x = this._pow(-1, i) * (this._pow(f, 2 * i)/ this._fact(2 * i));
            res = res + x;
            i = i + 1;
        }

        return res;    
    }
    
    float asin(float f) {
        float res = 0;
        float x = 1;
        float ulp;
        int i = 0;

        if (this._abs(f) > 1) {
            return 0;
        }
        if (f == 1) {
            return this.pi / 2;
        }
        if (f == -1) {
            return -this.pi / 2;
        }
        ulp = this.ulp(f);
        while (this._abs(x) > ulp) {
            x = (this._fact(2 * i) / this._pow(_fact(i) * this._pow(2, i), 2))* (this._pow(f, 2 * i + 1) / ( 2 * i + 1));
            res = res + x;
            i = i + 1;
        }
        return res;
    }
    
    float atan(float f) {
        float res = 0;
        float x = 1;
        float ulp;
        int i = 0;

        if (f == 1) {
            return this.pi / 4;
        }
        if (f == -1) {
            return -this.pi / 4;
        }
        if (this._abs(f) > 1) {
            return this.pi / 2 - this.atan(1 / f);
        }
        ulp = this.ulp(f);
        while (this._abs(x) > ulp) {
            x = (this._pow(-1, i) * (this._pow(f, 2 * i + 1) / (2 * i + 1)));
            res = res + x;
            i = i + 1;
        }
        return res;
    }

    float _pow(float a, float b) {
        float res = 1;
        float b = b;
        int i;
        if (b == 0) {
            return 1;
        }
        if (b < 0) {
            while (b < 0) {
                res = res / a;
                b = b + 1;
            }
            return res;
        }
        while (b > 0) {
            res = res * a;
            b = b - 1;
        }
        return res;
    }

    float _abs(float a) {
        if (a < 0.0) {
            return -a;
        }
        return a;
    }

     float _sqrt(float f) {
        float u0 = f/2.0f;
        float u1;
        int n = 0;

        while (n < 100) {
            u1 = (u0 + f/u0)/2.0f;
            u0 = u1;
            n = n + 1;
        }
    }

    float _fact(float a) {
        float res = 1;
        int i;
        if (a == 0) {
            return 1;
        }
        while (a > 0) {
            res = res * a;
            a = a - 1;
        }
        return res;
    }

    int _pow32(float f) {
        int e = 0;
        if (f == 0.0f) {
            return 0;
        }
        if (f < 0) {
            f = -f;
        }
        while (f < 1) {
            f = f * 2;
            e = e - 1;
        }
        while (f >= 2) {
            f = f / 2;
            e = e + 1;
        }
        return e;

    }

    float _log2(float a) {
        float res = 0;
        float x = 1;
        float e = 0.000001f;
        int i = 0;
        while (_abs(x) > e) {
            x = _pow(a - 1, i + 1)/ i + 1;
            res = res + x;
            i = i + 1;
        }
        return res;
    }

    int _floor(float a) {
        int res = (int) (a);
        return res;
    }

    int getRandomNumber()
        asm("
            CLK
            INT R1, R1
            REM #4, R1
            ADD #1, R1
            LOAD R1, R0    
        ");
}


// End of Deca Math library
